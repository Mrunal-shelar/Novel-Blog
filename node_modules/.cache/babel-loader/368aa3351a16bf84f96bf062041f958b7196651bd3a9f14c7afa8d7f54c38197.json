{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import UploadNovelForm from './UploadNovelForm';\n\n// function App() {\n//   const [novels, setNovels] = useState([]); // List of novels\n//   const [selectedNovel, setSelectedNovel] = useState(null); // Selected novel for details view\n//   const [view, setView] = useState('home'); // Tracks current view (home, upload, details)\n//   const [searchQuery, setSearchQuery] = useState(''); // Search query state\n\n//   // Load novels from localStorage when the component first mounts\n//   useEffect(() => {\n//     const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n//     setNovels(savedNovels);\n//   }, []);\n\n//   // Save novels to localStorage whenever the novels state changes\n//   useEffect(() => {\n//     localStorage.setItem('novels', JSON.stringify(novels));\n//   }, [novels]);\n\n//   // Function to add a new novel and switch back to home view\n//   const addNovel = (novel) => {\n//     setNovels([...novels, novel]); // Add the new novel to the list\n//     setView('home'); // Switch back to the home view immediately after uploading\n//   };\n\n//   const selectNovel = (novel) => {\n//     setSelectedNovel(novel);\n//     setView('details'); // Switch to the details view\n//   };\n\n//   // Filter novels based on the search query\n//   const filteredNovels = novels.filter((novel) =>\n//     novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       {view === 'home' && (\n//         <div>\n//           <h1>Novel List</h1>\n\n//           {/* Search Bar */}\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search for a novel\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//           />\n\n//           <button onClick={() => setView('upload')}>Upload a Novel</button>\n\n//           <ul>\n//             {filteredNovels.length > 0 ? (\n//               filteredNovels.map((novel, index) => (\n//                 <li key={index} onClick={() => selectNovel(novel)}>\n//                   {novel.title}\n//                 </li>\n//               ))\n//             ) : (\n//               <p>No novels found</p>\n//             )}\n//           </ul>\n//         </div>\n//       )}\n\n//       {view === 'upload' && <UploadNovelForm addNovel={addNovel} />} {/* Pass addNovel as prop */}\n\n//       {view === 'details' && selectedNovel && (\n//         <div>\n//           <h1>{selectedNovel.title}</h1>\n//           <p>Author: {selectedNovel.author}</p>\n//           <p>Genre: {selectedNovel.genre}</p>\n//           <p>Summary: {selectedNovel.summary}</p>\n//           <img src={selectedNovel.imageUrl} alt={selectedNovel.title} />\n//           <button onClick={() => setView('home')}>Back to Home</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/Mrudula/OneDrive/Desktop/Mrunal/prepinsta/Batch-02/Week_08/novel-blog/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import UploadNovelForm from './UploadNovelForm';\n\n// function App() {\n//   const [novels, setNovels] = useState([]); // List of novels\n//   const [selectedNovel, setSelectedNovel] = useState(null); // Selected novel for details view\n//   const [view, setView] = useState('home'); // Tracks current view (home, upload, details)\n//   const [searchQuery, setSearchQuery] = useState(''); // Search query state\n\n//   // Load novels from localStorage when the component first mounts\n//   useEffect(() => {\n//     const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n//     setNovels(savedNovels);\n//   }, []);\n\n//   // Save novels to localStorage whenever the novels state changes\n//   useEffect(() => {\n//     localStorage.setItem('novels', JSON.stringify(novels));\n//   }, [novels]);\n\n//   // Function to add a new novel and switch back to home view\n//   const addNovel = (novel) => {\n//     setNovels([...novels, novel]); // Add the new novel to the list\n//     setView('home'); // Switch back to the home view immediately after uploading\n//   };\n\n//   const selectNovel = (novel) => {\n//     setSelectedNovel(novel);\n//     setView('details'); // Switch to the details view\n//   };\n\n//   // Filter novels based on the search query\n//   const filteredNovels = novels.filter((novel) =>\n//     novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       {view === 'home' && (\n//         <div>\n//           <h1>Novel List</h1>\n\n//           {/* Search Bar */}\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search for a novel\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//           />\n\n//           <button onClick={() => setView('upload')}>Upload a Novel</button>\n\n//           <ul>\n//             {filteredNovels.length > 0 ? (\n//               filteredNovels.map((novel, index) => (\n//                 <li key={index} onClick={() => selectNovel(novel)}>\n//                   {novel.title}\n//                 </li>\n//               ))\n//             ) : (\n//               <p>No novels found</p>\n//             )}\n//           </ul>\n//         </div>\n//       )}\n\n//       {view === 'upload' && <UploadNovelForm addNovel={addNovel} />} {/* Pass addNovel as prop */}\n\n//       {view === 'details' && selectedNovel && (\n//         <div>\n//           <h1>{selectedNovel.title}</h1>\n//           <p>Author: {selectedNovel.author}</p>\n//           <p>Genre: {selectedNovel.genre}</p>\n//           <p>Summary: {selectedNovel.summary}</p>\n//           <img src={selectedNovel.imageUrl} alt={selectedNovel.title} />\n//           <button onClick={() => setView('home')}>Back to Home</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}