{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mrudula\\\\OneDrive\\\\Desktop\\\\Mrunal\\\\prepinsta\\\\Batch-02\\\\Week_08\\\\novel-blog\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import UploadNovelForm from './UploadNovelForm';\n// import app from \"./App.css\";\n\n// function App() {\n//   // Default novels\n//   const defaultNovels = [\n//     {\n//       title: 'The Great Gatsby',\n//       author: 'F. Scott Fitzgerald',\n//       genre: 'Classic',\n//       summary: 'A story about the mysterious millionaire Jay Gatsby and his obsession with Daisy Buchanan.',\n//       imageUrl: 'https://example.com/gatsby.jpg'\n//     },\n//     {\n//       title: '1984',\n//       author: 'George Orwell',\n//       genre: 'Dystopian',\n//       summary: 'A depiction of a totalitarian regime in a future society governed by Big Brother.',\n//       imageUrl: 'https://example.com/1984.jpg'\n//     },\n//     {\n//       title: 'To Kill a Mockingbird',\n//       author: 'Harper Lee',\n//       genre: 'Fiction',\n//       summary: 'A novel set in the American South during the 1930s, focusing on racial injustice.',\n//       imageUrl: 'https://example.com/mockingbird.jpg'\n//     }\n//   ];\n\n//   const [novels, setNovels] = useState([]); // List of novels\n//   const [selectedNovel, setSelectedNovel] = useState(null); // Selected novel for details view\n//   const [view, setView] = useState('home'); // Tracks current view (home, upload, details)\n//   const [searchQuery, setSearchQuery] = useState(''); // Search query state\n\n//   // Load novels from localStorage or set default novels\n//   useEffect(() => {\n//     const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n//     if (savedNovels.length > 0) {\n//       setNovels(savedNovels);\n//     } else {\n//       setNovels(defaultNovels); // If no novels in localStorage, use default novels\n//     }\n//   }, []);\n\n//   // Save novels to localStorage whenever the novels state changes\n//   useEffect(() => {\n//     if (novels.length > 0) {\n//       localStorage.setItem('novels', JSON.stringify(novels));\n//     }\n//   }, [novels]);\n\n//   // Function to add a new novel and switch back to home view\n//   const addNovel = (novel) => {\n//     setNovels([...novels, novel]); // Add the new novel to the list\n//     setView('home'); // Switch back to the home view immediately after uploading\n//   };\n\n//   const selectNovel = (novel) => {\n//     setSelectedNovel(novel);\n//     setView('details'); // Switch to the details view\n//   };\n\n//   // Filter novels based on the search query\n//   const filteredNovels = novels.filter((novel) =>\n//     novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       {view === 'home' && (\n//         <div>\n//           <h1>Novel List</h1>\n\n//           {/* Search Bar */}\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search for a novel\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//           />\n\n//           <button onClick={() => setView('upload')}>Upload a Novel</button>\n\n//           <ul>\n//             {filteredNovels.length > 0 ? (\n//               filteredNovels.map((novel, index) => (\n//                 <li key={index} onClick={() => selectNovel(novel)}>\n//                   <h2>{novel.title}</h2>\n//                   <p><strong>Author:</strong> {novel.author}</p>\n//                   <p><strong>Genre:</strong> {novel.genre}</p>\n//                   <p><strong>Summary:</strong> {novel.summary}</p>\n//                   {novel.imageUrl && <img src={novel.imageUrl} alt={novel.title} style={{ width: '100px', height: '150px' }} />}\n//                 </li>\n//               ))\n//             ) : (\n//               <p>No novels found</p>\n//             )}\n//           </ul>\n//         </div>\n//       )}\n\n//       {view === 'upload' && <UploadNovelForm addNovel={addNovel} />} {/* Pass addNovel as prop */}\n\n//       {view === 'details' && selectedNovel && (\n//         <div>\n//           <h1>{selectedNovel.title}</h1>\n//           <p><strong>Author:</strong> {selectedNovel.author}</p>\n//           <p><strong>Genre:</strong> {selectedNovel.genre}</p>\n//           <p><strong>Summary:</strong> {selectedNovel.summary}</p>\n//           {selectedNovel.imageUrl && <img src={selectedNovel.imageUrl} alt={selectedNovel.title} style={{ width: '200px', height: '300px' }} />}\n//           <button onClick={() => setView('home')}>Back to Home</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n/*\nimport React, { useState, useEffect } from 'react';\nimport UploadNovelForm from './UploadNovelForm';\nimport './App.css';\n\nfunction App() {\n  const [novels, setNovels] = useState([]);\n  const [view, setView] = useState('home');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n    setNovels(savedNovels);\n  }, []);\n\n  const addNovel = (novel) => {\n    const updatedNovels = [...novels, novel];\n    setNovels(updatedNovels);\n    localStorage.setItem('novels', JSON.stringify(updatedNovels));\n    setView('home');\n  };\n\n  const filteredNovels = novels.filter((novel) =>\n    novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // const toggleDarkMode = () => setDarkMode(!darkMode);\n\n  return (\n    <div className={darkMode ? 'dark-mode' : ''}>\n      <nav className=\"navbar\">\n        <h1>Novel Blog</h1>\n        <input\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search for a novel...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n        />\n        {/* <button onClick={toggleDarkMode} className=\"mode-toggle\">\n          {darkMode ? 'Light Mode' : 'Dark Mode'}\n//         </button> */ /*}\n                        </nav>\n                        <div className=\"container\">\n                        {view === 'home' && (\n                        <>\n                        <div className=\"novel-grid\">\n                        {filteredNovels.length > 0 ? (\n                        filteredNovels.map((novel, index) => (\n                        <div key={index} className=\"novel-card\">\n                        <img src={novel.imageUrl} alt={novel.title} className=\"novel-img\" />\n                        <div className=\"novel-info\">\n                        <h2>{novel.title}</h2>\n                        <p><strong>Author:</strong> {novel.author}</p>\n                        </div>\n                        <p><strong>Genre:</strong> {novel.genre}</p>\n                        </div>\n                        ))  ) : \n                        (\n                        <p>No novels found</p>\n                        )}\n                        </div>\n                        <button className=\"upload-button\" onClick={() => setView('upload')}>\n                        Upload a Novel\n                        </button>\n                        </>\n                        )}\n                        {view === 'upload' && (\n                        <div className=\"upload-form-container\">\n                        <UploadNovelForm addNovel={addNovel} />\n                        </div>\n                        )}\n                        </div>\n                        </div>\n                        );\n                        }\n                        export default App\n                        */\n\n//3rd\nimport React, { useState, useEffect } from 'react';\nimport UploadNovelForm from './UploadNovelForm';\nimport './App.css';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport SimpleSlider from './SimpleSlider';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction sider() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sider\",\n    children: /*#__PURE__*/_jsxDEV(SimpleSlider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n}\nfunction App() {\n  _s();\n  const [novels, setNovels] = useState([]);\n  const [view, setView] = useState('home');\n  const [searchQuery, setSearchQuery] = useState('');\n  useEffect(() => {\n    const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n    setNovels(savedNovels);\n  }, []);\n\n  // Add a new novel\n  const addNovel = novel => {\n    const updatedNovels = [...novels, novel];\n    setNovels(updatedNovels);\n    localStorage.setItem('novels', JSON.stringify(updatedNovels));\n    setView('home');\n  };\n\n  // Remove a novel by index\n  const removeNovel = indexToRemove => {\n    const updatedNovels = novels.filter((_, index) => index !== indexToRemove);\n    setNovels(updatedNovels);\n    localStorage.setItem('novels', JSON.stringify(updatedNovels));\n  };\n  const filteredNovels = novels.filter(novel => novel.title.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Novel Blog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-bar\",\n        placeholder: \"Search for a novel...\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [view === 'home' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"novel-grid\",\n          children: filteredNovels.length > 0 ? filteredNovels.map((novel, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"novel-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: novel.imageUrl,\n              alt: novel.title,\n              className: \"novel-img\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"novel-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: novel.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Author:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 26\n                }, this), \" \", novel.author]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Genre:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 26\n                }, this), \" \", novel.genre]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeNovel(index),\n              className: \"delete-button\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No novels found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-button\",\n          onClick: () => setView('upload'),\n          children: \"Upload a Novel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), view === 'upload' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-form-container\",\n        children: /*#__PURE__*/_jsxDEV(UploadNovelForm, {\n          addNovel: addNovel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cjkVaS44T/i76XMYcX1ZIgMcLjQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","UploadNovelForm","SimpleSlider","jsxDEV","_jsxDEV","Fragment","_Fragment","sider","className","children","fileName","_jsxFileName","lineNumber","columnNumber","App","_s","novels","setNovels","view","setView","searchQuery","setSearchQuery","savedNovels","JSON","parse","localStorage","getItem","addNovel","novel","updatedNovels","setItem","stringify","removeNovel","indexToRemove","filter","_","index","filteredNovels","title","toLowerCase","includes","type","placeholder","value","onChange","e","target","length","map","src","imageUrl","alt","author","genre","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Mrudula/OneDrive/Desktop/Mrunal/prepinsta/Batch-02/Week_08/novel-blog/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import UploadNovelForm from './UploadNovelForm';\n// import app from \"./App.css\";\n\n// function App() {\n//   // Default novels\n//   const defaultNovels = [\n//     {\n//       title: 'The Great Gatsby',\n//       author: 'F. Scott Fitzgerald',\n//       genre: 'Classic',\n//       summary: 'A story about the mysterious millionaire Jay Gatsby and his obsession with Daisy Buchanan.',\n//       imageUrl: 'https://example.com/gatsby.jpg'\n//     },\n//     {\n//       title: '1984',\n//       author: 'George Orwell',\n//       genre: 'Dystopian',\n//       summary: 'A depiction of a totalitarian regime in a future society governed by Big Brother.',\n//       imageUrl: 'https://example.com/1984.jpg'\n//     },\n//     {\n//       title: 'To Kill a Mockingbird',\n//       author: 'Harper Lee',\n//       genre: 'Fiction',\n//       summary: 'A novel set in the American South during the 1930s, focusing on racial injustice.',\n//       imageUrl: 'https://example.com/mockingbird.jpg'\n//     }\n//   ];\n\n//   const [novels, setNovels] = useState([]); // List of novels\n//   const [selectedNovel, setSelectedNovel] = useState(null); // Selected novel for details view\n//   const [view, setView] = useState('home'); // Tracks current view (home, upload, details)\n//   const [searchQuery, setSearchQuery] = useState(''); // Search query state\n\n//   // Load novels from localStorage or set default novels\n//   useEffect(() => {\n//     const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n//     if (savedNovels.length > 0) {\n//       setNovels(savedNovels);\n//     } else {\n//       setNovels(defaultNovels); // If no novels in localStorage, use default novels\n//     }\n//   }, []);\n\n//   // Save novels to localStorage whenever the novels state changes\n//   useEffect(() => {\n//     if (novels.length > 0) {\n//       localStorage.setItem('novels', JSON.stringify(novels));\n//     }\n//   }, [novels]);\n\n//   // Function to add a new novel and switch back to home view\n//   const addNovel = (novel) => {\n//     setNovels([...novels, novel]); // Add the new novel to the list\n//     setView('home'); // Switch back to the home view immediately after uploading\n//   };\n\n//   const selectNovel = (novel) => {\n//     setSelectedNovel(novel);\n//     setView('details'); // Switch to the details view\n//   };\n\n//   // Filter novels based on the search query\n//   const filteredNovels = novels.filter((novel) =>\n//     novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       {view === 'home' && (\n//         <div>\n//           <h1>Novel List</h1>\n\n//           {/* Search Bar */}\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search for a novel\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//           />\n\n//           <button onClick={() => setView('upload')}>Upload a Novel</button>\n\n//           <ul>\n//             {filteredNovels.length > 0 ? (\n//               filteredNovels.map((novel, index) => (\n//                 <li key={index} onClick={() => selectNovel(novel)}>\n//                   <h2>{novel.title}</h2>\n//                   <p><strong>Author:</strong> {novel.author}</p>\n//                   <p><strong>Genre:</strong> {novel.genre}</p>\n//                   <p><strong>Summary:</strong> {novel.summary}</p>\n//                   {novel.imageUrl && <img src={novel.imageUrl} alt={novel.title} style={{ width: '100px', height: '150px' }} />}\n//                 </li>\n//               ))\n//             ) : (\n//               <p>No novels found</p>\n//             )}\n//           </ul>\n//         </div>\n//       )}\n\n//       {view === 'upload' && <UploadNovelForm addNovel={addNovel} />} {/* Pass addNovel as prop */}\n\n//       {view === 'details' && selectedNovel && (\n//         <div>\n//           <h1>{selectedNovel.title}</h1>\n//           <p><strong>Author:</strong> {selectedNovel.author}</p>\n//           <p><strong>Genre:</strong> {selectedNovel.genre}</p>\n//           <p><strong>Summary:</strong> {selectedNovel.summary}</p>\n//           {selectedNovel.imageUrl && <img src={selectedNovel.imageUrl} alt={selectedNovel.title} style={{ width: '200px', height: '300px' }} />}\n//           <button onClick={() => setView('home')}>Back to Home</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n/*\nimport React, { useState, useEffect } from 'react';\nimport UploadNovelForm from './UploadNovelForm';\nimport './App.css';\n\nfunction App() {\n  const [novels, setNovels] = useState([]);\n  const [view, setView] = useState('home');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n    setNovels(savedNovels);\n  }, []);\n\n  const addNovel = (novel) => {\n    const updatedNovels = [...novels, novel];\n    setNovels(updatedNovels);\n    localStorage.setItem('novels', JSON.stringify(updatedNovels));\n    setView('home');\n  };\n\n  const filteredNovels = novels.filter((novel) =>\n    novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // const toggleDarkMode = () => setDarkMode(!darkMode);\n\n  return (\n    <div className={darkMode ? 'dark-mode' : ''}>\n      <nav className=\"navbar\">\n        <h1>Novel Blog</h1>\n        <input\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search for a novel...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n        />\n        {/* <button onClick={toggleDarkMode} className=\"mode-toggle\">\n          {darkMode ? 'Light Mode' : 'Dark Mode'}\n//         </button> *//*}\n  </nav>\n\n      <div className=\"container\">\n        {view === 'home' && (\n          <>\n            <div className=\"novel-grid\">\n              {filteredNovels.length > 0 ? (\n                filteredNovels.map((novel, index) => (\n               <div key={index} className=\"novel-card\">\n                    <img src={novel.imageUrl} alt={novel.title} className=\"novel-img\" />\n                    <div className=\"novel-info\">\n                     <h2>{novel.title}</h2>\n                       <p><strong>Author:</strong> {novel.author}</p>\n                     </div>\n                       <p><strong>Genre:</strong> {novel.genre}</p>\n                   </div>\n                   ))  ) : \n                   (\n                   <p>No novels found</p>\n               )}\n             </div>\n            <button className=\"upload-button\" onClick={() => setView('upload')}>\n               Upload a Novel\n             </button>\n           </>\n         )}\n\n         {view === 'upload' && (\n           <div className=\"upload-form-container\">\n             <UploadNovelForm addNovel={addNovel} />\n           </div>\n         )}\n       </div>\n     </div>\n   );\n }\n\n export default App\n */\n\n\n\n\n\n\n\n\n//3rd\nimport React, { useState, useEffect } from 'react';\nimport UploadNovelForm from './UploadNovelForm';\nimport './App.css';\n\nimport \"slick-carousel/slick/slick.css\"; \nimport \"slick-carousel/slick/slick-theme.css\";\nimport SimpleSlider from './SimpleSlider';\n\n\nfunction sider() {\n  return (\n    <div className=\"sider\">\n      <SimpleSlider />\n    </div>\n  );\n}\nfunction App() {\n  const [novels, setNovels] = useState([]);\n  const [view, setView] = useState('home');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n    setNovels(savedNovels);\n  }, []);\n\n  // Add a new novel\n  const addNovel = (novel) => {\n    const updatedNovels = [...novels, novel];\n    setNovels(updatedNovels);\n    localStorage.setItem('novels', JSON.stringify(updatedNovels));\n    setView('home');\n  };\n\n  // Remove a novel by index\n  const removeNovel = (indexToRemove) => {\n    const updatedNovels = novels.filter((_, index) => index !== indexToRemove);\n    setNovels(updatedNovels);\n    localStorage.setItem('novels', JSON.stringify(updatedNovels));\n  };\n\n\n  const filteredNovels = novels.filter((novel) =>\n    novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div>\n      {/* Navbar */}\n      <nav className=\"navbar\">\n        <h1>Novel Blog</h1>\n        <input\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search for a novel...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n        />\n      </nav>\n\n      {/* Main Container */}\n      <div className=\"container\">\n        {/* Show Home or Upload Form based on view */}\n        {view === 'home' && (\n          <>\n            <div className=\"novel-grid\">\n              {filteredNovels.length > 0 ? (\n                filteredNovels.map((novel, index) => (\n                  <div key={index} className=\"novel-card\">\n                    <img src={novel.imageUrl} alt={novel.title} className=\"novel-img\" />\n                    <div className=\"novel-info\">\n                      <h2>{novel.title}</h2>\n                      <p><strong>Author:</strong> {novel.author}</p>\n                      <p><strong>Genre:</strong> {novel.genre}</p>\n                    </div>\n                    {/* Delete Button */}\n                    <button onClick={() => removeNovel(index)} className=\"delete-button\">\n                      Delete\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <p>No novels found</p>\n              )}\n            </div>\n\n            <button className=\"upload-button\" onClick={() => setView('upload')}>\n              Upload a Novel\n            </button>\n          </>\n        )}\n\n      \n\n        {/* Show Upload Form */}\n        {view === 'upload' && (\n          <div className=\"upload-form-container\">\n            <UploadNovelForm addNovel={addNovel} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBA1CA,CA0CuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,WAAW;AAElB,OAAO,gCAAgC;AACvC,OAAO,sCAAsC;AAC7C,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG1C,SAASC,KAAKA,CAAA,EAAG;EACf,oB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}