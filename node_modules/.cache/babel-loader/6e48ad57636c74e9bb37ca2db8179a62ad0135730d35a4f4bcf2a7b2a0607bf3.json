{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mrudula\\\\OneDrive\\\\Desktop\\\\Mrunal\\\\prepinsta\\\\Batch-02\\\\Week_08\\\\novel-blog\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport UploadNovelForm from './UploadNovelForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [novels, setNovels] = useState([]);\n  const [selectedNovel, setSelectedNovel] = useState(null);\n  const [view, setView] = useState('home'); // Possible values: home, upload, details\n\n  // Load novels from localStorage when the component first mounts\n  useEffect(() => {\n    const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n    setNovels(savedNovels);\n  }, []); // Empty dependency array means this effect runs once, on mount.\n\n  // Save novels to localStorage whenever the novels state changes\n  useEffect(() => {\n    localStorage.setItem('novels', JSON.stringify(novels));\n  }, [novels]); // This effect runs every time `novels` state changes.\n\n  const addNovel = novel => {\n    setNovels([...novels, novel]);\n    setView('home');\n  };\n  const selectNovel = novel => {\n    setSelectedNovel(novel);\n    setView('details');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [view === 'home' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Novel List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setView('upload'),\n        children: \"Upload a Novel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: novels.map((novel, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => selectNovel(novel),\n          children: novel.title\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), view === 'upload' && /*#__PURE__*/_jsxDEV(UploadNovelForm, {\n      addNovel: addNovel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }, this), view === 'details' && selectedNovel && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: selectedNovel.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Author: \", selectedNovel.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Genre: \", selectedNovel.genre]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Summary: \", selectedNovel.summary]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: selectedNovel.imageUrl,\n        alt: selectedNovel.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setView('home'),\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9cNs0jq3nqJYSyhd4QXCTwDEzKQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","UploadNovelForm","jsxDEV","_jsxDEV","App","_s","novels","setNovels","selectedNovel","setSelectedNovel","view","setView","savedNovels","JSON","parse","localStorage","getItem","setItem","stringify","addNovel","novel","selectNovel","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","title","author","genre","summary","src","imageUrl","alt","_c","$RefreshReg$"],"sources":["C:/Users/Mrudula/OneDrive/Desktop/Mrunal/prepinsta/Batch-02/Week_08/novel-blog/src/App.js"],"sourcesContent":["\n\nimport React, { useState, useEffect } from 'react';\nimport UploadNovelForm from './UploadNovelForm';\n\nfunction App() {\n  const [novels, setNovels] = useState([]);\n  const [selectedNovel, setSelectedNovel] = useState(null);\n  const [view, setView] = useState('home'); // Possible values: home, upload, details\n\n  // Load novels from localStorage when the component first mounts\n  useEffect(() => {\n    const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n    setNovels(savedNovels);\n  }, []); // Empty dependency array means this effect runs once, on mount.\n\n  // Save novels to localStorage whenever the novels state changes\n  useEffect(() => {\n    localStorage.setItem('novels', JSON.stringify(novels));\n  }, [novels]); // This effect runs every time `novels` state changes.\n\n  const addNovel = (novel) => {\n    setNovels([...novels, novel]);\n    setView('home');\n  };\n\n  const selectNovel = (novel) => {\n    setSelectedNovel(novel);\n    setView('details');\n  };\n\n  return (\n    <div>\n      {view === 'home' && (\n        <div>\n          <h1>Novel List</h1>\n          <button onClick={() => setView('upload')}>Upload a Novel</button>\n          <ul>\n            {novels.map((novel, index) => (\n              <li key={index} onClick={() => selectNovel(novel)}>\n                {novel.title}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {view === 'upload' && <UploadNovelForm addNovel={addNovel} />}\n\n      {view === 'details' && selectedNovel && (\n        <div>\n          <h1>{selectedNovel.title}</h1>\n          <p>Author: {selectedNovel.author}</p>\n          <p>Genre: {selectedNovel.genre}</p>\n          <p>Summary: {selectedNovel.summary}</p>\n          <img src={selectedNovel.imageUrl} alt={selectedNovel.title} />\n          <button onClick={() => setView('home')}>Back to Home</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE;IACpET,SAAS,CAACK,WAAW,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAZ,SAAS,CAAC,MAAM;IACde,YAAY,CAACE,OAAO,CAAC,QAAQ,EAAEJ,IAAI,CAACK,SAAS,CAACZ,MAAM,CAAC,CAAC;EACxD,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,MAAMa,QAAQ,GAAIC,KAAK,IAAK;IAC1Bb,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEc,KAAK,CAAC,CAAC;IAC7BT,OAAO,CAAC,MAAM,CAAC;EACjB,CAAC;EAED,MAAMU,WAAW,GAAID,KAAK,IAAK;IAC7BX,gBAAgB,CAACW,KAAK,CAAC;IACvBT,OAAO,CAAC,SAAS,CAAC;EACpB,CAAC;EAED,oBACER,OAAA;IAAAmB,QAAA,GACGZ,IAAI,KAAK,MAAM,iBACdP,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBvB,OAAA;QAAQwB,OAAO,EAAEA,CAAA,KAAMhB,OAAO,CAAC,QAAQ,CAAE;QAAAW,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjEvB,OAAA;QAAAmB,QAAA,EACGhB,MAAM,CAACsB,GAAG,CAAC,CAACR,KAAK,EAAES,KAAK,kBACvB1B,OAAA;UAAgBwB,OAAO,EAAEA,CAAA,KAAMN,WAAW,CAACD,KAAK,CAAE;UAAAE,QAAA,EAC/CF,KAAK,CAACU;QAAK,GADLD,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN,EAEAhB,IAAI,KAAK,QAAQ,iBAAIP,OAAA,CAACF,eAAe;MAACkB,QAAQ,EAAEA;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAE5DhB,IAAI,KAAK,SAAS,IAAIF,aAAa,iBAClCL,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAKd,aAAa,CAACsB;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC9BvB,OAAA;QAAAmB,QAAA,GAAG,UAAQ,EAACd,aAAa,CAACuB,MAAM;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCvB,OAAA;QAAAmB,QAAA,GAAG,SAAO,EAACd,aAAa,CAACwB,KAAK;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCvB,OAAA;QAAAmB,QAAA,GAAG,WAAS,EAACd,aAAa,CAACyB,OAAO;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvCvB,OAAA;QAAK+B,GAAG,EAAE1B,aAAa,CAAC2B,QAAS;QAACC,GAAG,EAAE5B,aAAa,CAACsB;MAAM;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC9DvB,OAAA;QAAQwB,OAAO,EAAEA,CAAA,KAAMhB,OAAO,CAAC,MAAM,CAAE;QAAAW,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACrB,EAAA,CAxDQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AA0DZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}