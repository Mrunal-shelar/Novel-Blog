{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mrudula\\\\OneDrive\\\\Desktop\\\\Mrunal\\\\prepinsta\\\\Batch-02\\\\Week_08\\\\novel-blog\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import UploadNovelForm from './UploadNovelForm';\n// import app from \"./App.css\";\n\n// function App() {\n//   // Default novels\n//   const defaultNovels = [\n//     {\n//       title: 'The Great Gatsby',\n//       author: 'F. Scott Fitzgerald',\n//       genre: 'Classic',\n//       summary: 'A story about the mysterious millionaire Jay Gatsby and his obsession with Daisy Buchanan.',\n//       imageUrl: 'https://example.com/gatsby.jpg'\n//     },\n//     {\n//       title: '1984',\n//       author: 'George Orwell',\n//       genre: 'Dystopian',\n//       summary: 'A depiction of a totalitarian regime in a future society governed by Big Brother.',\n//       imageUrl: 'https://example.com/1984.jpg'\n//     },\n//     {\n//       title: 'To Kill a Mockingbird',\n//       author: 'Harper Lee',\n//       genre: 'Fiction',\n//       summary: 'A novel set in the American South during the 1930s, focusing on racial injustice.',\n//       imageUrl: 'https://example.com/mockingbird.jpg'\n//     }\n//   ];\n\n//   const [novels, setNovels] = useState([]); // List of novels\n//   const [selectedNovel, setSelectedNovel] = useState(null); // Selected novel for details view\n//   const [view, setView] = useState('home'); // Tracks current view (home, upload, details)\n//   const [searchQuery, setSearchQuery] = useState(''); // Search query state\n\n//   // Load novels from localStorage or set default novels\n//   useEffect(() => {\n//     const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n//     if (savedNovels.length > 0) {\n//       setNovels(savedNovels);\n//     } else {\n//       setNovels(defaultNovels); // If no novels in localStorage, use default novels\n//     }\n//   }, []);\n\n//   // Save novels to localStorage whenever the novels state changes\n//   useEffect(() => {\n//     if (novels.length > 0) {\n//       localStorage.setItem('novels', JSON.stringify(novels));\n//     }\n//   }, [novels]);\n\n//   // Function to add a new novel and switch back to home view\n//   const addNovel = (novel) => {\n//     setNovels([...novels, novel]); // Add the new novel to the list\n//     setView('home'); // Switch back to the home view immediately after uploading\n//   };\n\n//   const selectNovel = (novel) => {\n//     setSelectedNovel(novel);\n//     setView('details'); // Switch to the details view\n//   };\n\n//   // Filter novels based on the search query\n//   const filteredNovels = novels.filter((novel) =>\n//     novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       {view === 'home' && (\n//         <div>\n//           <h1>Novel List</h1>\n\n//           {/* Search Bar */}\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search for a novel\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//           />\n\n//           <button onClick={() => setView('upload')}>Upload a Novel</button>\n\n//           <ul>\n//             {filteredNovels.length > 0 ? (\n//               filteredNovels.map((novel, index) => (\n//                 <li key={index} onClick={() => selectNovel(novel)}>\n//                   <h2>{novel.title}</h2>\n//                   <p><strong>Author:</strong> {novel.author}</p>\n//                   <p><strong>Genre:</strong> {novel.genre}</p>\n//                   <p><strong>Summary:</strong> {novel.summary}</p>\n//                   {novel.imageUrl && <img src={novel.imageUrl} alt={novel.title} style={{ width: '100px', height: '150px' }} />}\n//                 </li>\n//               ))\n//             ) : (\n//               <p>No novels found</p>\n//             )}\n//           </ul>\n//         </div>\n//       )}\n\n//       {view === 'upload' && <UploadNovelForm addNovel={addNovel} />} {/* Pass addNovel as prop */}\n\n//       {view === 'details' && selectedNovel && (\n//         <div>\n//           <h1>{selectedNovel.title}</h1>\n//           <p><strong>Author:</strong> {selectedNovel.author}</p>\n//           <p><strong>Genre:</strong> {selectedNovel.genre}</p>\n//           <p><strong>Summary:</strong> {selectedNovel.summary}</p>\n//           {selectedNovel.imageUrl && <img src={selectedNovel.imageUrl} alt={selectedNovel.title} style={{ width: '200px', height: '300px' }} />}\n//           <button onClick={() => setView('home')}>Back to Home</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import UploadNovelForm from './UploadNovelForm';\n// import './App.css';\n\n// function App() {\n//   const [novels, setNovels] = useState([]);\n//   const [view, setView] = useState('home');\n//   const [searchQuery, setSearchQuery] = useState('');\n//   const [darkMode, setDarkMode] = useState(false);\n\n//   useEffect(() => {\n//     const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n//     setNovels(savedNovels);\n//   }, []);\n\n//   const addNovel = (novel) => {\n//     const updatedNovels = [...novels, novel];\n//     setNovels(updatedNovels);\n//     localStorage.setItem('novels', JSON.stringify(updatedNovels));\n//     setView('home');\n//   };\n\n//   const filteredNovels = novels.filter((novel) =>\n//     novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   // const toggleDarkMode = () => setDarkMode(!darkMode);\n\n//   return (\n//     <div className={darkMode ? 'dark-mode' : ''}>\n//       <nav className=\"navbar\">\n//         <h1>Novel Blog</h1>\n//         <input\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search for a novel...\"\n//           value={searchQuery}\n//           onChange={(e) => setSearchQuery(e.target.value)}\n//         />\n//         {/* <button onClick={toggleDarkMode} className=\"mode-toggle\">\n//           {darkMode ? 'Light Mode' : 'Dark Mode'}\n//         </button> */}\n//       </nav>\n\n//       <div className=\"container\">\n//         {view === 'home' && (\n//           <>\n//             <div className=\"novel-grid\">\n//               {filteredNovels.length > 0 ? (\n//                 filteredNovels.map((novel, index) => (\n//                   <div key={index} className=\"novel-card\">\n//                     <img src={novel.imageUrl} alt={novel.title} className=\"novel-img\" />\n//                     <div className=\"novel-info\">\n//                       <h2>{novel.title}</h2>\n//                       <p><strong>Author:</strong> {novel.author}</p>\n//                       <p><strong>Genre:</strong> {novel.genre}</p>\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <p>No novels found</p>\n//               )}\n//             </div>\n//             <button className=\"upload-button\" onClick={() => setView('upload')}>\n//               Upload a Novel\n//             </button>\n//           </>\n//         )}\n\n//         {view === 'upload' && (\n//           <div className=\"upload-form-container\">\n//             <UploadNovelForm addNovel={addNovel} />\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//3rd\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link, useNavigate } from 'react-router-dom';\nimport UploadNovelForm from './UploadNovelForm';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [novels, setNovels] = useState([]);\n  const [darkMode, setDarkMode] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n    setNovels(savedNovels);\n  }, []);\n  const addNovel = novel => {\n    const updatedNovels = [...novels, novel];\n    setNovels(updatedNovels);\n    localStorage.setItem('novels', JSON.stringify(updatedNovels));\n    navigate('/'); // Navigate back to home after uploading\n  };\n  const filteredNovels = novels.filter(novel => novel.title.toLowerCase().includes(searchQuery.toLowerCase()));\n  const toggleDarkMode = () => setDarkMode(!darkMode);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: darkMode ? 'dark-mode' : '',\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"nav-title\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Novel Blog\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search-bar\",\n          placeholder: \"Search for a novel...\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleDarkMode,\n          className: \"mode-toggle\",\n          children: darkMode ? 'Light Mode' : 'Dark Mode'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"novel-grid\",\n              children: filteredNovels.length > 0 ? filteredNovels.map((novel, index) => /*#__PURE__*/_jsxDEV(Link, {\n                to: `/novel/${index}`,\n                className: \"novel-card-link\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"novel-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: novel.imageUrl,\n                    alt: novel.title,\n                    className: \"novel-img\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"novel-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                      children: novel.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Author:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 274,\n                        columnNumber: 32\n                      }, this), \" \", novel.author]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 274,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Genre:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 275,\n                        columnNumber: 32\n                      }, this), \" \", novel.genre]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 275,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 25\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 23\n              }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No novels found\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"upload-button\",\n              onClick: () => navigate('/upload'),\n              children: \"Upload a Novel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/upload\",\n          element: /*#__PURE__*/_jsxDEV(UploadNovelForm, {\n            addNovel: addNovel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/novel/:id\",\n          element: /*#__PURE__*/_jsxDEV(NovelDetails, {\n            novels: novels\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"W5sNZFvml1eimlWdAeuSFMmUJak=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nfunction NovelDetails({\n  novels\n}) {\n  _s2();\n  const {\n    id\n  } = useParams();\n  const novel = novels[id];\n  if (!novel) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Novel not found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container novel-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: novel.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: novel.imageUrl,\n      alt: novel.title,\n      className: \"novel-details-img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Author:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 10\n      }, this), \" \", novel.author]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Genre:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 10\n      }, this), \" \", novel.genre]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Summary:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 10\n      }, this), \" \", novel.summary]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this);\n}\n_s2(NovelDetails, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", true);\n_c2 = NovelDetails;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"NovelDetails\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","Link","useNavigate","UploadNovelForm","jsxDEV","_jsxDEV","App","_s","novels","setNovels","darkMode","setDarkMode","searchQuery","setSearchQuery","navigate","savedNovels","JSON","parse","localStorage","getItem","addNovel","novel","updatedNovels","setItem","stringify","filteredNovels","filter","title","toLowerCase","includes","toggleDarkMode","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","path","element","length","map","index","src","imageUrl","alt","author","genre","NovelDetails","_c","_s2","id","useParams","summary","_c2","$RefreshReg$"],"sources":["C:/Users/Mrudula/OneDrive/Desktop/Mrunal/prepinsta/Batch-02/Week_08/novel-blog/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import UploadNovelForm from './UploadNovelForm';\n// import app from \"./App.css\";\n\n// function App() {\n//   // Default novels\n//   const defaultNovels = [\n//     {\n//       title: 'The Great Gatsby',\n//       author: 'F. Scott Fitzgerald',\n//       genre: 'Classic',\n//       summary: 'A story about the mysterious millionaire Jay Gatsby and his obsession with Daisy Buchanan.',\n//       imageUrl: 'https://example.com/gatsby.jpg'\n//     },\n//     {\n//       title: '1984',\n//       author: 'George Orwell',\n//       genre: 'Dystopian',\n//       summary: 'A depiction of a totalitarian regime in a future society governed by Big Brother.',\n//       imageUrl: 'https://example.com/1984.jpg'\n//     },\n//     {\n//       title: 'To Kill a Mockingbird',\n//       author: 'Harper Lee',\n//       genre: 'Fiction',\n//       summary: 'A novel set in the American South during the 1930s, focusing on racial injustice.',\n//       imageUrl: 'https://example.com/mockingbird.jpg'\n//     }\n//   ];\n\n//   const [novels, setNovels] = useState([]); // List of novels\n//   const [selectedNovel, setSelectedNovel] = useState(null); // Selected novel for details view\n//   const [view, setView] = useState('home'); // Tracks current view (home, upload, details)\n//   const [searchQuery, setSearchQuery] = useState(''); // Search query state\n\n//   // Load novels from localStorage or set default novels\n//   useEffect(() => {\n//     const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n//     if (savedNovels.length > 0) {\n//       setNovels(savedNovels);\n//     } else {\n//       setNovels(defaultNovels); // If no novels in localStorage, use default novels\n//     }\n//   }, []);\n\n//   // Save novels to localStorage whenever the novels state changes\n//   useEffect(() => {\n//     if (novels.length > 0) {\n//       localStorage.setItem('novels', JSON.stringify(novels));\n//     }\n//   }, [novels]);\n\n//   // Function to add a new novel and switch back to home view\n//   const addNovel = (novel) => {\n//     setNovels([...novels, novel]); // Add the new novel to the list\n//     setView('home'); // Switch back to the home view immediately after uploading\n//   };\n\n//   const selectNovel = (novel) => {\n//     setSelectedNovel(novel);\n//     setView('details'); // Switch to the details view\n//   };\n\n//   // Filter novels based on the search query\n//   const filteredNovels = novels.filter((novel) =>\n//     novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       {view === 'home' && (\n//         <div>\n//           <h1>Novel List</h1>\n\n//           {/* Search Bar */}\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search for a novel\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//           />\n\n//           <button onClick={() => setView('upload')}>Upload a Novel</button>\n\n//           <ul>\n//             {filteredNovels.length > 0 ? (\n//               filteredNovels.map((novel, index) => (\n//                 <li key={index} onClick={() => selectNovel(novel)}>\n//                   <h2>{novel.title}</h2>\n//                   <p><strong>Author:</strong> {novel.author}</p>\n//                   <p><strong>Genre:</strong> {novel.genre}</p>\n//                   <p><strong>Summary:</strong> {novel.summary}</p>\n//                   {novel.imageUrl && <img src={novel.imageUrl} alt={novel.title} style={{ width: '100px', height: '150px' }} />}\n//                 </li>\n//               ))\n//             ) : (\n//               <p>No novels found</p>\n//             )}\n//           </ul>\n//         </div>\n//       )}\n\n//       {view === 'upload' && <UploadNovelForm addNovel={addNovel} />} {/* Pass addNovel as prop */}\n\n//       {view === 'details' && selectedNovel && (\n//         <div>\n//           <h1>{selectedNovel.title}</h1>\n//           <p><strong>Author:</strong> {selectedNovel.author}</p>\n//           <p><strong>Genre:</strong> {selectedNovel.genre}</p>\n//           <p><strong>Summary:</strong> {selectedNovel.summary}</p>\n//           {selectedNovel.imageUrl && <img src={selectedNovel.imageUrl} alt={selectedNovel.title} style={{ width: '200px', height: '300px' }} />}\n//           <button onClick={() => setView('home')}>Back to Home</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import UploadNovelForm from './UploadNovelForm';\n// import './App.css';\n\n// function App() {\n//   const [novels, setNovels] = useState([]);\n//   const [view, setView] = useState('home');\n//   const [searchQuery, setSearchQuery] = useState('');\n//   const [darkMode, setDarkMode] = useState(false);\n\n//   useEffect(() => {\n//     const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n//     setNovels(savedNovels);\n//   }, []);\n\n//   const addNovel = (novel) => {\n//     const updatedNovels = [...novels, novel];\n//     setNovels(updatedNovels);\n//     localStorage.setItem('novels', JSON.stringify(updatedNovels));\n//     setView('home');\n//   };\n\n//   const filteredNovels = novels.filter((novel) =>\n//     novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   // const toggleDarkMode = () => setDarkMode(!darkMode);\n\n//   return (\n//     <div className={darkMode ? 'dark-mode' : ''}>\n//       <nav className=\"navbar\">\n//         <h1>Novel Blog</h1>\n//         <input\n//           type=\"text\"\n//           className=\"search-bar\"\n//           placeholder=\"Search for a novel...\"\n//           value={searchQuery}\n//           onChange={(e) => setSearchQuery(e.target.value)}\n//         />\n//         {/* <button onClick={toggleDarkMode} className=\"mode-toggle\">\n//           {darkMode ? 'Light Mode' : 'Dark Mode'}\n//         </button> */}\n//       </nav>\n\n//       <div className=\"container\">\n//         {view === 'home' && (\n//           <>\n//             <div className=\"novel-grid\">\n//               {filteredNovels.length > 0 ? (\n//                 filteredNovels.map((novel, index) => (\n//                   <div key={index} className=\"novel-card\">\n//                     <img src={novel.imageUrl} alt={novel.title} className=\"novel-img\" />\n//                     <div className=\"novel-info\">\n//                       <h2>{novel.title}</h2>\n//                       <p><strong>Author:</strong> {novel.author}</p>\n//                       <p><strong>Genre:</strong> {novel.genre}</p>\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <p>No novels found</p>\n//               )}\n//             </div>\n//             <button className=\"upload-button\" onClick={() => setView('upload')}>\n//               Upload a Novel\n//             </button>\n//           </>\n//         )}\n\n//         {view === 'upload' && (\n//           <div className=\"upload-form-container\">\n//             <UploadNovelForm addNovel={addNovel} />\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n//3rd\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link, useNavigate } from 'react-router-dom';\nimport UploadNovelForm from './UploadNovelForm';\nimport './App.css';\n\nfunction App() {\n  const [novels, setNovels] = useState([]);\n  const [darkMode, setDarkMode] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const savedNovels = JSON.parse(localStorage.getItem('novels')) || [];\n    setNovels(savedNovels);\n  }, []);\n\n  const addNovel = (novel) => {\n    const updatedNovels = [...novels, novel];\n    setNovels(updatedNovels);\n    localStorage.setItem('novels', JSON.stringify(updatedNovels));\n    navigate('/'); // Navigate back to home after uploading\n  };\n\n  const filteredNovels = novels.filter((novel) =>\n    novel.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const toggleDarkMode = () => setDarkMode(!darkMode);\n\n  return (\n    <div className={darkMode ? 'dark-mode' : ''}>\n      <Router>\n        <nav className=\"navbar\">\n          <Link to=\"/\" className=\"nav-title\">\n            <h1>Novel Blog</h1>\n          </Link>\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search for a novel...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n          <button onClick={toggleDarkMode} className=\"mode-toggle\">\n            {darkMode ? 'Light Mode' : 'Dark Mode'}\n          </button>\n        </nav>\n\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <div className=\"container\">\n                <div className=\"novel-grid\">\n                  {filteredNovels.length > 0 ? (\n                    filteredNovels.map((novel, index) => (\n                      <Link to={`/novel/${index}`} key={index} className=\"novel-card-link\">\n                        <div className=\"novel-card\">\n                          <img src={novel.imageUrl} alt={novel.title} className=\"novel-img\" />\n                          <div className=\"novel-info\">\n                            <h2>{novel.title}</h2>\n                            <p><strong>Author:</strong> {novel.author}</p>\n                            <p><strong>Genre:</strong> {novel.genre}</p>\n                          </div>\n                        </div>\n                      </Link>\n                    ))\n                  ) : (\n                    <p>No novels found</p>\n                  )}\n                </div>\n                <button className=\"upload-button\" onClick={() => navigate('/upload')}>\n                  Upload a Novel\n                </button>\n              </div>\n            }\n          />\n          <Route path=\"/upload\" element={<UploadNovelForm addNovel={addNovel} />} />\n          <Route path=\"/novel/:id\" element={<NovelDetails novels={novels} />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nfunction NovelDetails({ novels }) {\n  const { id } = useParams();\n  const novel = novels[id];\n\n  if (!novel) {\n    return <div className=\"container\"><p>Novel not found.</p></div>;\n  }\n\n  return (\n    <div className=\"container novel-details\">\n      <h2>{novel.title}</h2>\n      <img src={novel.imageUrl} alt={novel.title} className=\"novel-details-img\" />\n      <p><strong>Author:</strong> {novel.author}</p>\n      <p><strong>Genre:</strong> {novel.genre}</p>\n      <p><strong>Summary:</strong> {novel.summary}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AAC5F,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}